{"version":3,"sources":["assets/dati.js","constants/paesi.js","constants/conf.js","comp/Grafico.js","comp/Opzioni.js","comp/Main.js","App.js","serviceWorker.js","index.js"],"names":["dati","PAESI","COMMON_PROPS","fill","lineTension","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","Grafico","data","this","props","width","height","options","maintainAspectRatio","Component","Option","Select","children","map","paese","key","codice","descrizione","Opzioni","handleChangeSelectStati","codiciStati","onPaeseChange","handleChange","event","onTipoChange","target","value","handleChangeUltimoMese","name","setState","ultimoMese","checked","handleSlider","range","onRangeChange","formatTootip","valore","numGiorni","parseInt","span","className","mode","style","placeholder","onChange","paesi","allowClear","Group","tipo","buttonStyle","Button","min","max","step","tooltipVisible","tipFormatter","Main","liftPaesi","liftTipo","liftRange","ricalcolaGrafico","gg","etichette","giornoInizio","moment","subtract","giornoFinale","DATA_AGGIONAMENTO","push","format","add","giorni","state","newDataSets","PAESE","datiPaesePerTipo","giorno","dato","find","elem","DateRep","CountryExp","ilPaese","p","x","label","borderColor","backgroundColor","Object","assign","recuperaDatasetPaese","labels","datasets","href","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fe534aa2.chunk.js","sourcesContent":["export const dati = [];","const PAESI = [\r\n    {\r\n        \"codice\": \"United_States_of_America\",\r\n        \"descrizione\": \"Stati Uniti d'America\",\r\n        \"borderColor\": \"black\",\r\n        \"backgroundColor\": \"lightgrey\"\r\n    },\r\n    {\r\n        \"codice\": \"China\",\r\n        \"descrizione\": \"Cina\",\r\n        \"borderColor\": \"#ff0066\",\r\n        \"backgroundColor\": \"#ffb3d1\"\r\n    },\r\n    {\r\n        \"codice\": \"Italy\",\r\n        \"descrizione\": \"Italia\",\r\n        \"borderColor\": \"#b3003b\",\r\n        \"backgroundColor\": \"#ffccdd\"\r\n    },\r\n    {\r\n        \"codice\": \"Spain\",\r\n        \"descrizione\": \"Spagna\",\r\n        \"borderColor\": \"#005580\",\r\n        \"backgroundColor\": \"#66ccff\"\r\n    },\r\n    {\r\n        \"codice\": \"France\",\r\n        \"descrizione\": \"Francia\",\r\n        \"borderColor\": \"#008000\",\r\n        \"backgroundColor\": \"#99ff99\"\r\n    },\r\n    {\r\n        \"codice\": \"Japan\",\r\n        \"descrizione\": \"Giappone\",\r\n        \"borderColor\": \"#997a00\",\r\n        \"backgroundColor\": \"#fff0b3\"\r\n    },\r\n    {\r\n        \"codice\": \"Germany\",\r\n        \"descrizione\": \"Germania\",\r\n        \"borderColor\": \"#00b33c\",\r\n        \"backgroundColor\": \"#ccffdd\"\r\n    },\r\n    {\r\n        \"codice\": \"United_Kingdom\",\r\n        \"descrizione\": \"Regno Unito\",\r\n        \"borderColor\": \"#b33c00\",\r\n        \"backgroundColor\": \"#ffbb99\"\r\n    },\r\n\r\n];\r\n\r\nexport default PAESI;\r\n\r\n","const COMMON_PROPS = {\r\n    fill: true,\r\n    lineTension: 0.3,\r\n    borderCapStyle: 'butt',\r\n    borderDash: [],\r\n    borderDashOffset: 0.0,\r\n    borderJoinStyle: 'miter',\r\n    pointBorderColor: 'black',\r\n    pointBackgroundColor: 'white',\r\n    pointBorderWidth: 1.5,\r\n    pointHoverRadius: 7,\r\n    pointHoverBackgroundColor: 'red',\r\n    pointHoverBorderColor: 'green',\r\n    pointHoverBorderWidth: 5,\r\n    pointRadius: 1,\r\n    pointHitRadius: 10,\r\n};\r\n\r\nconst DATA_AGGIONAMENTO = \"20/04/2020\";\r\n\r\nexport { DATA_AGGIONAMENTO, COMMON_PROPS };\r\n\r\n","import React, { Component } from \"react\";\r\nimport { Line } from 'react-chartjs-2';\r\n\r\nclass Grafico extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Line data={this.props.data} width={5} height={400} options={{ maintainAspectRatio: false }} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Grafico;\r\n\r\n","import { Radio, Slider, Select } from 'antd';\r\nimport 'antd/dist/antd.css';\r\nimport React, { Component } from \"react\";\r\nimport PAESI from \"../constants/paesi\";\r\nimport { Row, Col } from 'antd';\r\nimport { DATA_AGGIONAMENTO } from \"../constants/conf\";\r\n\r\n\r\n\r\n/***************************************************\r\n * rendering degli switch degli stati\r\n ***************************************************/\r\n\r\nconst { Option } = Select;\r\nconst children = PAESI.map(paese => <Option key={paese.codice}>{paese.descrizione}</Option>);\r\n\r\nclass Opzioni extends Component {\r\n\r\n    componentDidMount() {\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////\r\n    //// EVENTI DI CONTROLLO\r\n    ////////////////////////////////////////////////////////////////\r\n\r\n    handleChangeSelectStati = codiciStati => {\r\n        this.props.onPaeseChange(codiciStati);\r\n    };\r\n\r\n    handleChange = (event) => {\r\n        this.props.onTipoChange(event.target.value);\r\n    };\r\n\r\n    handleChangeUltimoMese = name => event => {\r\n        this.setState({ ultimoMese: event.target.checked });\r\n    };\r\n\r\n    handleSlider = (range) => {\r\n        this.props.onRangeChange(range);\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////\r\n    //// RENDERING PARZIALI\r\n    ////////////////////////////////////////////////////////////////\r\n\r\n\r\n\r\n    /***************************************************\r\n     * etichetta dei tooltip dello slider\r\n     ***************************************************/\r\n\r\n    formatTootip = (valore) => {\r\n\r\n        let numGiorni = -parseInt(valore);\r\n\r\n        if (numGiorni === 0) return DATA_AGGIONAMENTO;\r\n        if (numGiorni === 1) return \"1 giorno prima\";\r\n        return numGiorni + \" giorni prima\"\r\n\r\n    }\r\n\r\n\r\n    ////////////////////////////////////////////////////////////////\r\n    //// RENDER\r\n    ////////////////////////////////////////////////////////////////\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <Row>\r\n                    <Col span={24}>\r\n                        <fieldset className={\"opzfieldset\"}>\r\n                            <legend className={\"opzlegend\"}> Opzioni </legend>\r\n\r\n                            <div>\r\n                                Paesi:\r\n                                <Select  \r\n                                    mode=\"multiple\"\r\n                                    style={{ width: '80%' }}\r\n                                    placeholder=\"Seleziona almeno uno stato...\"\r\n                                    onChange={this.handleChangeSelectStati}\r\n                                    value={this.props.paesi}\r\n                                    allowClear={true}\r\n                                >\r\n                                    {children}\r\n                                </Select>\r\n\r\n                            </div>\r\n\r\n                            <div>\r\n                            Grafici:\r\n                                <Radio.Group name=\"tipo\" onChange={this.handleChange}\r\n                                    value={this.props.tipo} \r\n                                    buttonStyle=\"solid\">\r\n                                    <Radio.Button value={\"SumDeaths\"}>Tot. decessi</Radio.Button>\r\n                                    <Radio.Button value={\"SumCases\"}>Tot. contagi</Radio.Button>\r\n                                    <Radio.Button value={\"NewDeaths\"}>Nuovi decessi</Radio.Button>\r\n                                    <Radio.Button value={\"NewConfCases\"}>Nuovi contagi</Radio.Button>\r\n                                </Radio.Group>\r\n                            </div>\r\n\r\n                            <div className=\"slider\">\r\n                                P. di rilevazione:\r\n                                <Slider min={-81} max={0} step={1} range value={this.props.range}\r\n                                    tooltipVisible={true}\r\n                                    tipFormatter={this.formatTootip}\r\n                                    onChange={this.handleSlider} />\r\n                            </div>\r\n                        </fieldset>\r\n                    </Col>\r\n                </Row>\r\n\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default Opzioni;\r\n\r\n","import moment from \"moment\";\r\nimport React, { Component } from \"react\";\r\nimport { dati } from '../assets/dati';\r\nimport PAESI from \"../constants/paesi\";\r\nimport { COMMON_PROPS, DATA_AGGIONAMENTO } from \"../constants/conf\";\r\n\r\nimport Grafico from \"./Grafico\";\r\nimport Opzioni from \"./Opzioni\";\r\nimport 'antd/dist/antd.css';\r\nimport { Row, Col } from \"antd\";\r\n\r\nlet giorni = (range) => {\r\n    let etichette = [];\r\n    let giornoInizio = moment().subtract(-range[0], 'days');\r\n\r\n    let dataAggiornamento = moment(DATA_AGGIONAMENTO + \" 23:59:ss\", \"DD/MM/YYYY HH:mm:ss\");\r\n    let giornoFinale = dataAggiornamento.subtract(-range[1], 'days');\r\n\r\n    while (giornoInizio <= giornoFinale) {\r\n        etichette.push(giornoInizio.format(\"DD/MM/YYYY\"));\r\n        giornoInizio.add(1, 'days');\r\n    }\r\n\r\n    return etichette;\r\n}\r\n\r\n\r\nlet recuperaDatasetPaese = (paese, tipo, gg) => {\r\n\r\n    let datiPaesePerTipo = gg.map((giorno) => {\r\n        let dato = dati.find((elem) => elem.DateRep === giorno && elem.CountryExp === paese);\r\n        if (dato == null)\r\n            return 0;\r\n        return dato[tipo];\r\n\r\n    });\r\n\r\n\r\n    let ilPaese = PAESI.find(p => p.codice === paese);\r\n\r\n    let x = {\r\n        label: ilPaese.descrizione,\r\n        data: datiPaesePerTipo,\r\n        borderColor: ilPaese.borderColor,\r\n        backgroundColor: ilPaese.backgroundColor\r\n\r\n    };\r\n\r\n    return (\r\n        Object.assign(x, COMMON_PROPS)\r\n    )\r\n}\r\n\r\n\r\n\r\nclass Main extends Component {\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            tipo: \"SumDeaths\",\r\n            range: [-45, 0],\r\n            paesi: [\"France\", \"Spain\", \"Italy\", \"United_Kingdom\",]\r\n        }\r\n\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////\r\n    // LIFT UP DELLO STATO\r\n    ////////////////////////////////////////////////////////////////\r\n\r\n    liftPaesi = (codiciStati) => {\r\n            this.setState({ paesi: codiciStati })\r\n    }\r\n\r\n    liftTipo = (tipo) => {\r\n        this.setState({ \"tipo\": tipo })\r\n    }\r\n\r\n    liftRange = (range) => {\r\n        this.setState({ \"range\": range })\r\n    }\r\n\r\n\r\n    ////////////////////////////////////////////////////////////////\r\n    // RICALCOLO\r\n    ////////////////////////////////////////////////////////////////\r\n\r\n\r\n    ricalcolaGrafico = () => {\r\n\r\n        let gg = giorni(this.state.range);\r\n        let newDataSets = this.state.paesi.map(PAESE => recuperaDatasetPaese(PAESE, this.state.tipo, gg));\r\n\r\n        return ({\r\n            labels: gg,\r\n            datasets: newDataSets\r\n        });\r\n\r\n    }\r\n\r\n\r\n    ////////////////////////////////////////////////////////////////\r\n    // *** RENDER ***\r\n    ////////////////////////////////////////////////////////////////\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <Row>\r\n                    <Col span={24}>\r\n                        <h1 className=\"titolo\">Situazione contagi / decessi per Coronavirus al {DATA_AGGIONAMENTO}</h1>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col span={24}>\r\n                        <Opzioni {...this.state}\r\n                            onPaeseChange={this.liftPaesi}\r\n                            onTipoChange={this.liftTipo}\r\n                            onRangeChange={this.liftRange}  ></Opzioni>\r\n\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col span={24}>\r\n                        <div className=\"grafico\">\r\n                            <Grafico data={this.ricalcolaGrafico()}></Grafico>\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        <p className=\"alert\">Attenzione! L'applicazione è ancora in  fase di sviluppo per cui sono possibili errori e malfunzionamenti</p>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        <div className=\"msg\">\r\n                            (*) I contagi / decessi del <strong>16 marzo </strong>\r\n                        sono stati registrati SOLO il giorno successivo:\r\n                        ecco perché in tali giorni si vede una perentina quanto anomala discesa\r\n                        seguito da un picco altrettanto improbabile.\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        I dati sono stati resi disponibili da:\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        <a href=\"https://www.ecdc.europa.eu/en/publications-data/download-todays-data-geographic-distribution-covid-19-cases-worldwide\"\r\n                        >European Centre for Disease Prevention and Control</a>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        Chart CV - Versione 0.6\r\n                        </Col>\r\n                </Row >\r\n                <Row>\r\n                    <Col>\r\n                        <a href=\"mailto:franco.vuoto@gmail.com\">Franco Vuoto</a> - Bologna, 14/03/2020\r\n                        </Col>\r\n                </Row >\r\n            </div >\r\n        );\r\n    }\r\n}\r\n\r\nexport default Main;\r\n\r\n","import React from 'react';\r\n\r\nimport './App.css';\r\nimport Main from './comp/Main';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Main></Main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}